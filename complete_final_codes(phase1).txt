model_utils.py
import torch
import torch.nn as nn
import torchvision.models as models

class MultiTaskModel(nn.Module):
    def __init__(self):
        super(MultiTaskModel, self).__init__()

        # Load pretrained ResNet18
        base_model = models.resnet18(weights=models.ResNet18_Weights.IMAGENET1K_V1)
        self.backbone = nn.Sequential(*list(base_model.children())[:-1])

        # Heads for multitask classification
        self.fc_skin_type = nn.Linear(512, 3)  # dry, normal, oily
        self.fc_features = nn.Linear(512, 5)   # acne, pimples, wrinkles, pigmentation, dark_circles

    def forward(self, x):
        x = self.backbone(x)
        x = x.view(x.size(0), -1)
        return self.fc_skin_type(x), self.fc_features(x)
----------------------------------------------------------------------------------------------------------------------------------------------------------
train.py
import os
import torch
import torch.nn as nn
from torchvision import models, transforms
from torch.utils.data import Dataset, DataLoader
from PIL import Image
import pandas as pd
from tqdm import tqdm

# =========================
# Paths
# =========================
CSV_PATH = 'dataset/final_labels.csv'
IMAGE_DIR = 'dataset/cropped'
MODEL_DIR = 'C:/Users/Dell/Desktop/faceheal_final/models'
os.makedirs(MODEL_DIR, exist_ok=True)

# =========================
# Dataset Class
# =========================
class SkinDataset(Dataset):
    def __init__(self, csv_file, image_dir, transform=None):
        self.data = pd.read_csv(csv_file)
        self.image_dir = image_dir
        self.transform = transform

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        row = self.data.iloc[idx]
        img_path = os.path.join(self.image_dir, row['filename'])
        image = Image.open(img_path).convert('RGB')

        if self.transform:
            image = self.transform(image)

        # Remap skin_type from {2,3,4} to {0,1,2}
        skin_type_map = {2: 0, 3: 1, 4: 2}
        skin_type = skin_type_map[int(row['skin_type'])]

        # Binary labels
        acne = int(row['acne'])
        pimples = int(row['pimples'])
        pigmentation = int(row['pigmentation'])
        wrinkles = int(row['wrinkles'])
        dark_circles = int(row['dark_circles'])

        multi_labels = torch.tensor(
            [acne, pimples, pigmentation, wrinkles, dark_circles],
            dtype=torch.float32
        )

        return image, skin_type, multi_labels

# =========================
# Model Class (ResNet18 with 2 Heads)
# =========================
class MultiTaskModel(nn.Module):
    def __init__(self):
        super(MultiTaskModel, self).__init__()
        base = models.resnet18(pretrained=True)
        self.backbone = nn.Sequential(*list(base.children())[:-1])  # Remove FC layer
        self.pool = nn.AdaptiveAvgPool2d((1, 1))
        self.flatten = nn.Flatten()

        self.fc_skin_type = nn.Linear(512, 3)   # 3 skin types
        self.fc_features = nn.Linear(512, 5)    # 5 binary outputs

    def forward(self, x):
        x = self.backbone(x)
        x = self.pool(x)
        x = self.flatten(x)

        skin_type_out = self.fc_skin_type(x)
        features_out = self.fc_features(x)

        return skin_type_out, features_out

# =========================
# Train Function
# =========================
def train():
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    # Transforms
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406],
                             std=[0.229, 0.224, 0.225])
    ])

    # Dataset & Dataloader
    dataset = SkinDataset(CSV_PATH, IMAGE_DIR, transform)
    dataloader = DataLoader(dataset, batch_size=32, shuffle=True)

    # Model
    model = MultiTaskModel().to(device)

    # Loss Functions
    loss_skin = nn.CrossEntropyLoss()
    loss_features = nn.BCEWithLogitsLoss()

    # Optimizer
    optimizer = torch.optim.Adam(model.parameters(), lr=1e-4)

    # Training Loop
    model.train()
    for epoch in range(10):
        running_loss = 0.0
        for images, skin_types, features in tqdm(dataloader, desc=f"Epoch {epoch+1}/10"):
            images = images.to(device)
            skin_types = skin_types.to(device)
            features = features.to(device)

            optimizer.zero_grad()
            out_skin, out_features = model(images)

            loss1 = loss_skin(out_skin, skin_types)
            loss2 = loss_features(out_features, features)
            loss = loss1 + loss2

            loss.backward()
            optimizer.step()

            running_loss += loss.item()

        print(f"[Epoch {epoch+1}] Loss: {running_loss / len(dataloader):.4f}")

    # Save Model
    torch.save(model.state_dict(), os.path.join(MODEL_DIR, 'multitask_model.pth'))
    print("[✅] Model training complete and saved.")

# =========================
# Entry Point
# =========================
if __name__ == "__main__":
    train()  
----------------------------------------------------------------------------------------------------------------------------------------------------------
main.py
import os
import io
from PIL import Image

from fastapi import FastAPI, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles

import torch
import torchvision.transforms as transforms
from facenet_pytorch import MTCNN

from model_utils import MultiTaskModel  # Ensure this file defines the model architecture

# ─────────────────────────────────────────────────────────────
# ✅ App Setup and CORS
app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ─────────────────────────────────────────────────────────────
# ✅ Path Setup
current_dir = os.path.dirname(os.path.abspath(__file__))
root_project_dir = os.path.normpath(os.path.join(current_dir, ".."))

# Mount static files (e.g., HTML/CSS/JS)
app.mount("/static", StaticFiles(directory=root_project_dir), name="static")

# Mount images folder (to serve image-1.jpg, etc.)
images_path = os.path.join(current_dir, "images")
app.mount("/images", StaticFiles(directory=images_path), name="images")

# ─────────────────────────────────────────────────────────────
# ✅ Device + Model Load
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Load face detector
mtcnn = MTCNN(keep_all=False, device=device)

# Load skin analysis model
MODEL_PATH = os.path.join(root_project_dir, "models", "multitask_model.pth")
MODEL_PATH = os.path.normpath(MODEL_PATH)

try:
    model = MultiTaskModel()
    model.load_state_dict(torch.load(MODEL_PATH, map_location=device))
    model.to(device)
    model.eval()
except FileNotFoundError:
    print(f"❌ Model file not found at {MODEL_PATH}")
    exit()

# ─────────────────────────────────────────────────────────────
# ✅ Labels
skin_type_labels = {0: "Oily", 1: "Normal", 2: "Dry"}
binary_labels = {0: "No", 1: "Yes"}

# ─────────────────────────────────────────────────────────────
# ✅ Remedies Function
def generate_remedies(pred):
    remedies = {}

    if pred["skin_type"] == "Oily":
        remedies["skin_type"] = "Use salicylic acid-based cleansers. Avoid heavy moisturizers."
    elif pred["skin_type"] == "Dry":
        remedies["skin_type"] = "Apply hydrating moisturizers. Use mild cleansers."
    elif pred["skin_type"] == "Normal":
        remedies["skin_type"] = "Maintain a balanced skincare routine."

    if pred["acne"] == "Yes":
        remedies["acne"] = "Use benzoyl peroxide or salicylic acid. Avoid touching your face."
    if pred["pimples"] == "Yes":
        remedies["pimples"] = "Apply topical treatments like tea tree oil. Keep skin clean."
    if pred["pigmentation"] == "Yes":
        remedies["pigmentation"] = "Use niacinamide or vitamin C. Wear sunscreen daily."
    if pred["wrinkles"] == "Yes":
        remedies["wrinkles"] = "Use retinoids. Hydrate well. Apply sunscreen daily."
    if pred["dark_circles"] == "Yes":
        remedies["dark_circles"] = "Get enough sleep. Use caffeine eye creams or cold compresses."

    return remedies

# ─────────────────────────────────────────────────────────────
# ✅ Frontend Route
@app.get("/", response_class=HTMLResponse)
async def serve_frontend():
    html_file_path = os.path.join(root_project_dir, "frontpage.html")
    try:
        with open(html_file_path, "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content, status_code=200)
    except FileNotFoundError:
        return HTMLResponse(content="❌ frontpage.html not found at expected path.", status_code=404)

# ─────────────────────────────────────────────────────────────
# ✅ Predict Endpoint
@app.post("/predict/")
async def predict(file: UploadFile = File(...)):
    try:
        image = Image.open(io.BytesIO(await file.read())).convert("RGB")
    except Exception:
        return JSONResponse(status_code=400, content={"error": "Invalid image file."})

    boxes, probs = mtcnn.detect(image)

    if boxes is None or len(boxes) == 0 or probs[0] < 0.90:
        return JSONResponse(status_code=400, content={"error": "❌ No confident face detected in the image."})

    face_tensor = mtcnn(image)
    if face_tensor is None:
        return JSONResponse(status_code=400, content={"error": "❌ Face extraction failed."})

    if isinstance(face_tensor, list) and len(face_tensor) > 0:
        face_tensor = face_tensor[0]
    elif not isinstance(face_tensor, torch.Tensor):
        return JSONResponse(status_code=500, content={"error": "Unexpected MTCNN output type."})

    # Preprocess
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.Normalize([0.485, 0.456, 0.406],
                             [0.229, 0.224, 0.225])
    ])
    face_tensor = transform(face_tensor).unsqueeze(0).to(device)

    # Predict
    with torch.no_grad():
        skin_out, features_out = model(face_tensor)
        skin_pred = torch.argmax(skin_out, dim=1).item()
        feature_probs = torch.sigmoid(features_out).squeeze().cpu().numpy()
        feature_preds = (feature_probs > 0.5).astype(int)

    predictions = {
        "skin_type": skin_type_labels.get(skin_pred, "Unknown"),
        "acne": binary_labels[feature_preds[0]],
        "pimples": binary_labels[feature_preds[1]],
        "wrinkles": binary_labels[feature_preds[2]],
        "pigmentation": binary_labels[feature_preds[3]],
        "dark_circles": binary_labels[feature_preds[4]],
    }

    remedies = generate_remedies(predictions)

    return {
        "predictions": predictions,
        "remedies": remedies
    }
----------------------------------------------------------------------------------------------------------------------------------------------------------
frontpage.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>FaceHeal Skincare</title>
  <style>
    * {
      box-sizing: border-box;
      font-family: 'Segoe UI', sans-serif;
      margin: 0;
      padding: 0;
    }

    body {
      background: black;
      color: white;
      height: 100vh;
      overflow: hidden;
    }

    .container {
      display: flex;
      width: 100%;
      height: 100%;
    }

    .left-panel, .right-section {
      width: 50%;
      padding: 60px;
    }

    .left-panel {
      display: flex;
      flex-direction: column;
      justify-content: center;
      background: black;
    }

    .logo {
      font-size: 22px;
      font-weight: bold;
      display: flex;
      align-items: center;
      margin-bottom: 60px;
    }

    .logo-icon {
      background: white;
      color: black;
      font-weight: bold;
      padding: 8px 10px;
      border-radius: 5px;
      margin-right: 10px;
    }

    h1 {
      font-size: 48px;
      margin-bottom: 10px;
    }

    h2 {
      font-size: 20px;
      font-weight: 400;
      margin-bottom: 40px;
    }

    .upload-btn {
      background-color: white;
      border: none;
      border-radius: 10px;
      padding: 16px 32px;
      color: black;
      font-size: 18px;
      cursor: pointer;
      margin-bottom: 40px;
    }

    .features label {
      display: flex;
      align-items: center;
      margin-bottom: 10px;
    }

    .features input {
      margin-right: 10px;
    }

    .right-section {
      display: grid;
      grid-template-columns: 1fr 1fr;
      grid-template-rows: 1fr 1fr;
      gap: 0;
    }

    .right-section img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      filter: grayscale(100%);
    }

    .modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background-color: rgba(0, 0, 0, 0.85);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }

    .modal-content {
      display: flex;
      background-color: #111;
      border-radius: 10px;
      padding: 20px;
      width: 80%;
      max-width: 800px;
    }

    .modal-left, .modal-right {
      flex: 1;
      padding: 20px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }

    .modal-left button {
      background: white;
      color: black;
      padding: 12px 20px;
      margin: 10px;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      cursor: pointer;
    }

    .modal-right img {
      max-width: 100%;
      height: auto;
      border-radius: 10px;
      border: 2px solid white;
    }

    .submit-btn {
      display: none;
      margin-top: 20px;
    }

    .close-modal {
      position: absolute;
      top: 20px;
      right: 30px;
      font-size: 28px;
      color: white;
      cursor: pointer;
    }

    .loading {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0, 0, 0, 0.9);
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      font-size: 24px;
      z-index: 9999;
    }

    .result-page {
      display: none;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: left;
      height: 100vh;
      padding: 40px;
    }

    .result-box {
      background-color: #111;
      border: 2px solid white;
      border-radius: 15px;
      padding: 40px;
      width: 80%;
      max-width: 700px;
      box-shadow: 0 0 20px rgba(255, 255, 255, 0.2);
    }

    .result-box h2 {
      margin-bottom: 20px;
      font-size: 28px;
      text-align: center;
    }

    .result-box p {
      margin: 10px 0;
      font-size: 18px;
    }

    .result-box hr {
      margin: 20px 0;
      border-color: #333;
    }

    .result-box button {
      margin-top: 30px;
      padding: 12px 24px;
      background: white;
      color: black;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      cursor: pointer;
    }
  </style>
</head>
<body>

<!-- Upload Section -->
<div class="container" id="mainPage">
  <div class="left-panel">
    <div class="logo">
      <span class="logo-icon">FH</span> FaceHeal
    </div>
    <h1>SKINCARE</h1>
    <h2>Concern + Remedy</h2>
    <button class="upload-btn" onclick="openModal()">Upload Image</button>

    <div class="features">
      <label><input type="checkbox" checked disabled> Skin Type Detection</label>
      <label><input type="checkbox" checked disabled> Acne & Wrinkle Detection</label>
      <label><input type="checkbox" checked disabled> Pigmentation Analysis</label>
      <label><input type="checkbox" checked disabled> Texture Tone Analysis</label>
    </div>
  </div>

  <div class="right-section">
    <img src="images/image-1.jpg" />
    <img src="images/image-2.jpg" />
    <img src="images/image-3.jpg" />
    <img src="images/image-4.jpg" />
  </div>
</div>

<!-- Modal Upload -->
<div class="modal" id="uploadModal">
  <div class="close-modal" onclick="closeModal()">&times;</div>
  <div class="modal-content">
    <div class="modal-left">
      <button onclick="document.getElementById('imageInput').click()">Upload from Computer</button>
      <button onclick="alert('Camera function coming soon')">Click a Picture</button>
      <input type="file" id="imageInput" accept="image/*" style="display: none;" onchange="handleImage(event)" />
      <button id="submitBtn" class="submit-btn" onclick="submitImage()">Submit</button>
    </div>
    <div class="modal-right">
      <img id="previewModalImage" src="images/image-1.jpg" alt="Preview"/>
    </div>
  </div>
</div>

<!-- Loading -->
<div class="loading" id="loadingOverlay" style="display:none;">
  Analyzing your skin...
</div>

<!-- Results Section -->
<div class="result-page" id="resultPage">
  <div class="result-box">
    <h2>Skin Analysis Result</h2>

    <div id="predictionResults">
      <!-- JS will populate -->
    </div>

    <hr>

    <div id="remedyResults">
      <!-- JS will populate -->
    </div>

    <button onclick="location.reload()">Back to Upload</button>
  </div>
</div>

<script>
  let selectedImageFile = null;

  function openModal() {
    document.getElementById('uploadModal').style.display = 'flex';
  }

  function closeModal() {
    document.getElementById('uploadModal').style.display = 'none';
  }

  function handleImage(event) {
    const file = event.target.files[0];
    if (!file) return;

    selectedImageFile = file;
    const reader = new FileReader();
    reader.onload = function(e) {
      document.getElementById('previewModalImage').src = e.target.result;
      document.getElementById('submitBtn').style.display = 'block';
    };
    reader.readAsDataURL(file);
  }

  function submitImage() {
    if (!selectedImageFile) return alert("Please select an image first!");

    const formData = new FormData();
    formData.append('file', selectedImageFile);

    document.getElementById('uploadModal').style.display = 'none';
    document.getElementById('loadingOverlay').style.display = 'flex';

    fetch('http://127.0.0.1:8000/predict/', {
      method: 'POST',
      body: formData
    })
    .then(response => {
      if (!response.ok) throw new Error("Prediction failed");
      return response.json();
    })
    .then(data => {
      document.getElementById("mainPage").style.display = "none";
      document.getElementById("loadingOverlay").style.display = "none";
      document.getElementById("resultPage").style.display = "flex";

      const preds = data.predictions;
      const remedies = data.remedies;

      let predHTML = '';
      for (const [key, value] of Object.entries(preds)) {
        if (key === 'dark_circles') continue; // Remove dark circles from predictions
        predHTML += `<p><strong>${key.replace('_', ' ')}:</strong> ${value}</p>`;
      }

      let remedyHTML = '<h3>Recommended Remedies</h3>';
      for (const [key, value] of Object.entries(remedies)) {
        if (key === 'dark_circles') continue; // Remove dark circles from remedies
        remedyHTML += `<p><strong>${key.replace('_', ' ')}:</strong> ${value}</p>`;
      }

      document.getElementById("predictionResults").innerHTML = predHTML;
      document.getElementById("remedyResults").innerHTML = remedyHTML;
    })
    .catch(error => {
      alert("Error: " + error.message);
      document.getElementById('loadingOverlay').style.display = 'none';
    });
  }
</script>

</body>
</html>

